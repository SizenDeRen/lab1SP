section .data
  array db 1, 12, 55, 255, 192, 63, 77, 99, 200, 11  ; исходный массив
  array_len equ $-array                  ; длина массива

section .bss
  result resb 10                         ; массив для хранения результата
  count  resb 1                          ; счетчик количества элементов меньше 128

section .text
  global _start

_start:
  mov ecx, array_len      ; загрузка длины массива в регистр ecx
  mov esi, 0              ; установка индекса массива в 0
  mov edi, result         ; загрузка адреса результата в регистр edi
  mov dl, 0x6B            ; загрузка кода 01101011 в регистр dl

loop_start:
  cmp esi, ecx            ; проверка, достигнут ли конец массива
  je loop_end             ; если да, выход из цикла
  mov al, [array + esi]   ; загрузка элемента массива в регистр al
  or al, dl               ; объединение элемента массива с кодом 01101011
  mov [edi + esi], al     ; сохранение результата в массиве result
  cmp al, 128             ; проверка, меньше ли элемент 128
  jl inc_count            ; если да, увеличение счетчика
  inc esi                 ; увеличение индекса массива
  jmp loop_start          ; переход на начало цикла

inc_count:
  inc byte [count]        ; увеличение счетчика
  inc esi                 ; увеличение индекса массива
  jmp loop_start          ; переход на начало цикла

loop_end:
  movzx eax, byte [count] ; загрузка значения счетчика в регистр eax 
  mov ebx, 1 ; задание аргумента функции write (STDOUT) 
  lea ecx, [eax + '0'] ; преобразование числа в символ 
  mov edx, 1 ; длина выводимого сообщения 
  int 0x80 ; системный вызов write для вывода количества элементов меньше 128.
  
  mov eax, 1              ; вызов системного вызова exit
  xor ebx, ebx            ; установка кода выхода в 0
  int 0x80                ; вызов системного вызова
